// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: env_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_env_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_env_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_env_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_env_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_env_5finfo_2eproto;
class env_config_header_t;
class env_config_header_tDefaultTypeInternal;
extern env_config_header_tDefaultTypeInternal _env_config_header_t_default_instance_;
class env_config_t;
class env_config_tDefaultTypeInternal;
extern env_config_tDefaultTypeInternal _env_config_t_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::env_config_header_t* Arena::CreateMaybeMessage<::env_config_header_t>(Arena*);
template<> ::env_config_t* Arena::CreateMaybeMessage<::env_config_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class env_config_header_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:env_config_header_t) */ {
 public:
  env_config_header_t();
  virtual ~env_config_header_t();

  env_config_header_t(const env_config_header_t& from);
  env_config_header_t(env_config_header_t&& from) noexcept
    : env_config_header_t() {
    *this = ::std::move(from);
  }

  inline env_config_header_t& operator=(const env_config_header_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline env_config_header_t& operator=(env_config_header_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const env_config_header_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const env_config_header_t* internal_default_instance() {
    return reinterpret_cast<const env_config_header_t*>(
               &_env_config_header_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(env_config_header_t& a, env_config_header_t& b) {
    a.Swap(&b);
  }
  inline void Swap(env_config_header_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline env_config_header_t* New() const final {
    return CreateMaybeMessage<env_config_header_t>(nullptr);
  }

  env_config_header_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<env_config_header_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const env_config_header_t& from);
  void MergeFrom(const env_config_header_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(env_config_header_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "env_config_header_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_env_5finfo_2eproto);
    return ::descriptor_table_env_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvNameFieldNumber = 1,
    kEnvHostNameFieldNumber = 5,
    kEnvInviteFieldNumber = 6,
    kEnvIpv4StreamPortFieldNumber = 2,
    kEnvIpv6StreamPortFieldNumber = 3,
    kEnvPidFieldNumber = 4,
  };
  // required bytes env_name = 1 [default = ""];
  bool has_env_name() const;
  private:
  bool _internal_has_env_name() const;
  public:
  void clear_env_name();
  const std::string& env_name() const;
  void set_env_name(const std::string& value);
  void set_env_name(std::string&& value);
  void set_env_name(const char* value);
  void set_env_name(const void* value, size_t size);
  std::string* mutable_env_name();
  std::string* release_env_name();
  void set_allocated_env_name(std::string* env_name);
  private:
  const std::string& _internal_env_name() const;
  void _internal_set_env_name(const std::string& value);
  std::string* _internal_mutable_env_name();
  public:

  // required bytes env_host_name = 5 [default = ""];
  bool has_env_host_name() const;
  private:
  bool _internal_has_env_host_name() const;
  public:
  void clear_env_host_name();
  const std::string& env_host_name() const;
  void set_env_host_name(const std::string& value);
  void set_env_host_name(std::string&& value);
  void set_env_host_name(const char* value);
  void set_env_host_name(const void* value, size_t size);
  std::string* mutable_env_host_name();
  std::string* release_env_host_name();
  void set_allocated_env_host_name(std::string* env_host_name);
  private:
  const std::string& _internal_env_host_name() const;
  void _internal_set_env_host_name(const std::string& value);
  std::string* _internal_mutable_env_host_name();
  public:

  // required bytes env_invite = 6 [default = ""];
  bool has_env_invite() const;
  private:
  bool _internal_has_env_invite() const;
  public:
  void clear_env_invite();
  const std::string& env_invite() const;
  void set_env_invite(const std::string& value);
  void set_env_invite(std::string&& value);
  void set_env_invite(const char* value);
  void set_env_invite(const void* value, size_t size);
  std::string* mutable_env_invite();
  std::string* release_env_invite();
  void set_allocated_env_invite(std::string* env_invite);
  private:
  const std::string& _internal_env_invite() const;
  void _internal_set_env_invite(const std::string& value);
  std::string* _internal_mutable_env_invite();
  public:

  // required int32 env_ipv4_stream_port = 2 [default = 0];
  bool has_env_ipv4_stream_port() const;
  private:
  bool _internal_has_env_ipv4_stream_port() const;
  public:
  void clear_env_ipv4_stream_port();
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_stream_port() const;
  void set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_ipv4_stream_port() const;
  void _internal_set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 env_ipv6_stream_port = 3 [default = 0];
  bool has_env_ipv6_stream_port() const;
  private:
  bool _internal_has_env_ipv6_stream_port() const;
  public:
  void clear_env_ipv6_stream_port();
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv6_stream_port() const;
  void set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_ipv6_stream_port() const;
  void _internal_set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 env_pid = 4 [default = 0];
  bool has_env_pid() const;
  private:
  bool _internal_has_env_pid() const;
  public:
  void clear_env_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 env_pid() const;
  void set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_pid() const;
  void _internal_set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:env_config_header_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_invite_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_stream_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv6_stream_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_pid_;
  friend struct ::TableStruct_env_5finfo_2eproto;
};
// -------------------------------------------------------------------

class env_config_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:env_config_t) */ {
 public:
  env_config_t();
  virtual ~env_config_t();

  env_config_t(const env_config_t& from);
  env_config_t(env_config_t&& from) noexcept
    : env_config_t() {
    *this = ::std::move(from);
  }

  inline env_config_t& operator=(const env_config_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline env_config_t& operator=(env_config_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const env_config_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const env_config_t* internal_default_instance() {
    return reinterpret_cast<const env_config_t*>(
               &_env_config_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(env_config_t& a, env_config_t& b) {
    a.Swap(&b);
  }
  inline void Swap(env_config_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline env_config_t* New() const final {
    return CreateMaybeMessage<env_config_t>(nullptr);
  }

  env_config_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<env_config_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const env_config_t& from);
  void MergeFrom(const env_config_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(env_config_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "env_config_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_env_5finfo_2eproto);
    return ::descriptor_table_env_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvNameFieldNumber = 1,
    kEnvHeadersPathFieldNumber = 2,
    kEnvMountpointFieldNumber = 3,
    kEnvComponentsPathFieldNumber = 4,
    kEnvX509CertificatePathFieldNumber = 5,
    kEnvNetworkIfnameFieldNumber = 6,
    kEnvIpv4MulticastGroupAddrFieldNumber = 7,
    kEnvIpv6MulticastGroupAddrFieldNumber = 11,
    kEnvHostNameFieldNumber = 19,
    kEnvCaCertFileFieldNumber = 20,
    kEnvCaPrivKeyFileFieldNumber = 21,
    kEnvCertInfoFieldNumber = 22,
    kEnvIpv4BroadcastPortFieldNumber = 8,
    kEnvIpv4MulticastPortFieldNumber = 9,
    kEnvIpv4StreamPortFieldNumber = 10,
    kEnvIpv6MulticastPortFieldNumber = 12,
    kEnvIpv6StreamPortFieldNumber = 13,
    kEnvIpv6EnabledFieldNumber = 15,
    kEnvCertExpTimeFieldNumber = 23,
    kEnvMaxBuffsizeFieldNumber = 16,
    kEnvPidFieldNumber = 18,
    kEnvIpv4EnabledFieldNumber = 14,
    kEnvBroadcastIntervalMsFieldNumber = 17,
  };
  // required bytes env_name = 1 [default = ""];
  bool has_env_name() const;
  private:
  bool _internal_has_env_name() const;
  public:
  void clear_env_name();
  const std::string& env_name() const;
  void set_env_name(const std::string& value);
  void set_env_name(std::string&& value);
  void set_env_name(const char* value);
  void set_env_name(const void* value, size_t size);
  std::string* mutable_env_name();
  std::string* release_env_name();
  void set_allocated_env_name(std::string* env_name);
  private:
  const std::string& _internal_env_name() const;
  void _internal_set_env_name(const std::string& value);
  std::string* _internal_mutable_env_name();
  public:

  // required bytes env_headers_path = 2 [default = ""];
  bool has_env_headers_path() const;
  private:
  bool _internal_has_env_headers_path() const;
  public:
  void clear_env_headers_path();
  const std::string& env_headers_path() const;
  void set_env_headers_path(const std::string& value);
  void set_env_headers_path(std::string&& value);
  void set_env_headers_path(const char* value);
  void set_env_headers_path(const void* value, size_t size);
  std::string* mutable_env_headers_path();
  std::string* release_env_headers_path();
  void set_allocated_env_headers_path(std::string* env_headers_path);
  private:
  const std::string& _internal_env_headers_path() const;
  void _internal_set_env_headers_path(const std::string& value);
  std::string* _internal_mutable_env_headers_path();
  public:

  // required bytes env_mountpoint = 3 [default = ""];
  bool has_env_mountpoint() const;
  private:
  bool _internal_has_env_mountpoint() const;
  public:
  void clear_env_mountpoint();
  const std::string& env_mountpoint() const;
  void set_env_mountpoint(const std::string& value);
  void set_env_mountpoint(std::string&& value);
  void set_env_mountpoint(const char* value);
  void set_env_mountpoint(const void* value, size_t size);
  std::string* mutable_env_mountpoint();
  std::string* release_env_mountpoint();
  void set_allocated_env_mountpoint(std::string* env_mountpoint);
  private:
  const std::string& _internal_env_mountpoint() const;
  void _internal_set_env_mountpoint(const std::string& value);
  std::string* _internal_mutable_env_mountpoint();
  public:

  // required bytes env_components_path = 4 [default = ""];
  bool has_env_components_path() const;
  private:
  bool _internal_has_env_components_path() const;
  public:
  void clear_env_components_path();
  const std::string& env_components_path() const;
  void set_env_components_path(const std::string& value);
  void set_env_components_path(std::string&& value);
  void set_env_components_path(const char* value);
  void set_env_components_path(const void* value, size_t size);
  std::string* mutable_env_components_path();
  std::string* release_env_components_path();
  void set_allocated_env_components_path(std::string* env_components_path);
  private:
  const std::string& _internal_env_components_path() const;
  void _internal_set_env_components_path(const std::string& value);
  std::string* _internal_mutable_env_components_path();
  public:

  // required bytes env_x509_certificate_path = 5 [default = ""];
  bool has_env_x509_certificate_path() const;
  private:
  bool _internal_has_env_x509_certificate_path() const;
  public:
  void clear_env_x509_certificate_path();
  const std::string& env_x509_certificate_path() const;
  void set_env_x509_certificate_path(const std::string& value);
  void set_env_x509_certificate_path(std::string&& value);
  void set_env_x509_certificate_path(const char* value);
  void set_env_x509_certificate_path(const void* value, size_t size);
  std::string* mutable_env_x509_certificate_path();
  std::string* release_env_x509_certificate_path();
  void set_allocated_env_x509_certificate_path(std::string* env_x509_certificate_path);
  private:
  const std::string& _internal_env_x509_certificate_path() const;
  void _internal_set_env_x509_certificate_path(const std::string& value);
  std::string* _internal_mutable_env_x509_certificate_path();
  public:

  // required bytes env_network_ifname = 6 [default = ""];
  bool has_env_network_ifname() const;
  private:
  bool _internal_has_env_network_ifname() const;
  public:
  void clear_env_network_ifname();
  const std::string& env_network_ifname() const;
  void set_env_network_ifname(const std::string& value);
  void set_env_network_ifname(std::string&& value);
  void set_env_network_ifname(const char* value);
  void set_env_network_ifname(const void* value, size_t size);
  std::string* mutable_env_network_ifname();
  std::string* release_env_network_ifname();
  void set_allocated_env_network_ifname(std::string* env_network_ifname);
  private:
  const std::string& _internal_env_network_ifname() const;
  void _internal_set_env_network_ifname(const std::string& value);
  std::string* _internal_mutable_env_network_ifname();
  public:

  // required bytes env_ipv4_multicast_group_addr = 7 [default = ""];
  bool has_env_ipv4_multicast_group_addr() const;
  private:
  bool _internal_has_env_ipv4_multicast_group_addr() const;
  public:
  void clear_env_ipv4_multicast_group_addr();
  const std::string& env_ipv4_multicast_group_addr() const;
  void set_env_ipv4_multicast_group_addr(const std::string& value);
  void set_env_ipv4_multicast_group_addr(std::string&& value);
  void set_env_ipv4_multicast_group_addr(const char* value);
  void set_env_ipv4_multicast_group_addr(const void* value, size_t size);
  std::string* mutable_env_ipv4_multicast_group_addr();
  std::string* release_env_ipv4_multicast_group_addr();
  void set_allocated_env_ipv4_multicast_group_addr(std::string* env_ipv4_multicast_group_addr);
  private:
  const std::string& _internal_env_ipv4_multicast_group_addr() const;
  void _internal_set_env_ipv4_multicast_group_addr(const std::string& value);
  std::string* _internal_mutable_env_ipv4_multicast_group_addr();
  public:

  // required bytes env_ipv6_multicast_group_addr = 11 [default = ""];
  bool has_env_ipv6_multicast_group_addr() const;
  private:
  bool _internal_has_env_ipv6_multicast_group_addr() const;
  public:
  void clear_env_ipv6_multicast_group_addr();
  const std::string& env_ipv6_multicast_group_addr() const;
  void set_env_ipv6_multicast_group_addr(const std::string& value);
  void set_env_ipv6_multicast_group_addr(std::string&& value);
  void set_env_ipv6_multicast_group_addr(const char* value);
  void set_env_ipv6_multicast_group_addr(const void* value, size_t size);
  std::string* mutable_env_ipv6_multicast_group_addr();
  std::string* release_env_ipv6_multicast_group_addr();
  void set_allocated_env_ipv6_multicast_group_addr(std::string* env_ipv6_multicast_group_addr);
  private:
  const std::string& _internal_env_ipv6_multicast_group_addr() const;
  void _internal_set_env_ipv6_multicast_group_addr(const std::string& value);
  std::string* _internal_mutable_env_ipv6_multicast_group_addr();
  public:

  // required bytes env_host_name = 19 [default = ""];
  bool has_env_host_name() const;
  private:
  bool _internal_has_env_host_name() const;
  public:
  void clear_env_host_name();
  const std::string& env_host_name() const;
  void set_env_host_name(const std::string& value);
  void set_env_host_name(std::string&& value);
  void set_env_host_name(const char* value);
  void set_env_host_name(const void* value, size_t size);
  std::string* mutable_env_host_name();
  std::string* release_env_host_name();
  void set_allocated_env_host_name(std::string* env_host_name);
  private:
  const std::string& _internal_env_host_name() const;
  void _internal_set_env_host_name(const std::string& value);
  std::string* _internal_mutable_env_host_name();
  public:

  // required bytes env_ca_cert_file = 20 [default = ""];
  bool has_env_ca_cert_file() const;
  private:
  bool _internal_has_env_ca_cert_file() const;
  public:
  void clear_env_ca_cert_file();
  const std::string& env_ca_cert_file() const;
  void set_env_ca_cert_file(const std::string& value);
  void set_env_ca_cert_file(std::string&& value);
  void set_env_ca_cert_file(const char* value);
  void set_env_ca_cert_file(const void* value, size_t size);
  std::string* mutable_env_ca_cert_file();
  std::string* release_env_ca_cert_file();
  void set_allocated_env_ca_cert_file(std::string* env_ca_cert_file);
  private:
  const std::string& _internal_env_ca_cert_file() const;
  void _internal_set_env_ca_cert_file(const std::string& value);
  std::string* _internal_mutable_env_ca_cert_file();
  public:

  // required bytes env_ca_priv_key_file = 21 [default = ""];
  bool has_env_ca_priv_key_file() const;
  private:
  bool _internal_has_env_ca_priv_key_file() const;
  public:
  void clear_env_ca_priv_key_file();
  const std::string& env_ca_priv_key_file() const;
  void set_env_ca_priv_key_file(const std::string& value);
  void set_env_ca_priv_key_file(std::string&& value);
  void set_env_ca_priv_key_file(const char* value);
  void set_env_ca_priv_key_file(const void* value, size_t size);
  std::string* mutable_env_ca_priv_key_file();
  std::string* release_env_ca_priv_key_file();
  void set_allocated_env_ca_priv_key_file(std::string* env_ca_priv_key_file);
  private:
  const std::string& _internal_env_ca_priv_key_file() const;
  void _internal_set_env_ca_priv_key_file(const std::string& value);
  std::string* _internal_mutable_env_ca_priv_key_file();
  public:

  // required bytes env_cert_info = 22 [default = ""];
  bool has_env_cert_info() const;
  private:
  bool _internal_has_env_cert_info() const;
  public:
  void clear_env_cert_info();
  const std::string& env_cert_info() const;
  void set_env_cert_info(const std::string& value);
  void set_env_cert_info(std::string&& value);
  void set_env_cert_info(const char* value);
  void set_env_cert_info(const void* value, size_t size);
  std::string* mutable_env_cert_info();
  std::string* release_env_cert_info();
  void set_allocated_env_cert_info(std::string* env_cert_info);
  private:
  const std::string& _internal_env_cert_info() const;
  void _internal_set_env_cert_info(const std::string& value);
  std::string* _internal_mutable_env_cert_info();
  public:

  // required int32 env_ipv4_broadcast_port = 8 [default = 0];
  bool has_env_ipv4_broadcast_port() const;
  private:
  bool _internal_has_env_ipv4_broadcast_port() const;
  public:
  void clear_env_ipv4_broadcast_port();
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_broadcast_port() const;
  void set_env_ipv4_broadcast_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_ipv4_broadcast_port() const;
  void _internal_set_env_ipv4_broadcast_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 env_ipv4_multicast_port = 9 [default = 0];
  bool has_env_ipv4_multicast_port() const;
  private:
  bool _internal_has_env_ipv4_multicast_port() const;
  public:
  void clear_env_ipv4_multicast_port();
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_multicast_port() const;
  void set_env_ipv4_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_ipv4_multicast_port() const;
  void _internal_set_env_ipv4_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 env_ipv4_stream_port = 10 [default = 0];
  bool has_env_ipv4_stream_port() const;
  private:
  bool _internal_has_env_ipv4_stream_port() const;
  public:
  void clear_env_ipv4_stream_port();
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_stream_port() const;
  void set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_ipv4_stream_port() const;
  void _internal_set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 env_ipv6_multicast_port = 12 [default = 0];
  bool has_env_ipv6_multicast_port() const;
  private:
  bool _internal_has_env_ipv6_multicast_port() const;
  public:
  void clear_env_ipv6_multicast_port();
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv6_multicast_port() const;
  void set_env_ipv6_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_ipv6_multicast_port() const;
  void _internal_set_env_ipv6_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 env_ipv6_stream_port = 13 [default = 0];
  bool has_env_ipv6_stream_port() const;
  private:
  bool _internal_has_env_ipv6_stream_port() const;
  public:
  void clear_env_ipv6_stream_port();
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv6_stream_port() const;
  void set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_ipv6_stream_port() const;
  void _internal_set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool env_ipv6_enabled = 15 [default = false];
  bool has_env_ipv6_enabled() const;
  private:
  bool _internal_has_env_ipv6_enabled() const;
  public:
  void clear_env_ipv6_enabled();
  bool env_ipv6_enabled() const;
  void set_env_ipv6_enabled(bool value);
  private:
  bool _internal_env_ipv6_enabled() const;
  void _internal_set_env_ipv6_enabled(bool value);
  public:

  // required uint64 env_cert_exp_time = 23 [default = 0];
  bool has_env_cert_exp_time() const;
  private:
  bool _internal_has_env_cert_exp_time() const;
  public:
  void clear_env_cert_exp_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 env_cert_exp_time() const;
  void set_env_cert_exp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_env_cert_exp_time() const;
  void _internal_set_env_cert_exp_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 env_max_buffsize = 16 [default = 0];
  bool has_env_max_buffsize() const;
  private:
  bool _internal_has_env_max_buffsize() const;
  public:
  void clear_env_max_buffsize();
  ::PROTOBUF_NAMESPACE_ID::int32 env_max_buffsize() const;
  void set_env_max_buffsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_max_buffsize() const;
  void _internal_set_env_max_buffsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 env_pid = 18 [default = -1];
  bool has_env_pid() const;
  private:
  bool _internal_has_env_pid() const;
  public:
  void clear_env_pid();
  ::PROTOBUF_NAMESPACE_ID::int32 env_pid() const;
  void set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_env_pid() const;
  void _internal_set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool env_ipv4_enabled = 14 [default = true];
  bool has_env_ipv4_enabled() const;
  private:
  bool _internal_has_env_ipv4_enabled() const;
  public:
  void clear_env_ipv4_enabled();
  bool env_ipv4_enabled() const;
  void set_env_ipv4_enabled(bool value);
  private:
  bool _internal_env_ipv4_enabled() const;
  void _internal_set_env_ipv4_enabled(bool value);
  public:

  // required uint32 env_broadcast_interval_ms = 17 [default = 1000];
  bool has_env_broadcast_interval_ms() const;
  private:
  bool _internal_has_env_broadcast_interval_ms() const;
  public:
  void clear_env_broadcast_interval_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 env_broadcast_interval_ms() const;
  void set_env_broadcast_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_env_broadcast_interval_ms() const;
  void _internal_set_env_broadcast_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:env_config_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_headers_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_mountpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_components_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_x509_certificate_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_network_ifname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_ipv4_multicast_group_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_ipv6_multicast_group_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_ca_cert_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_ca_priv_key_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_cert_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_broadcast_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_multicast_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv4_stream_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv6_multicast_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_ipv6_stream_port_;
  bool env_ipv6_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint64 env_cert_exp_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_max_buffsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_pid_;
  bool env_ipv4_enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 env_broadcast_interval_ms_;
  friend struct ::TableStruct_env_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// env_config_header_t

// required bytes env_name = 1 [default = ""];
inline bool env_config_header_t::_internal_has_env_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool env_config_header_t::has_env_name() const {
  return _internal_has_env_name();
}
inline void env_config_header_t::clear_env_name() {
  env_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& env_config_header_t::env_name() const {
  // @@protoc_insertion_point(field_get:env_config_header_t.env_name)
  return _internal_env_name();
}
inline void env_config_header_t::set_env_name(const std::string& value) {
  _internal_set_env_name(value);
  // @@protoc_insertion_point(field_set:env_config_header_t.env_name)
}
inline std::string* env_config_header_t::mutable_env_name() {
  // @@protoc_insertion_point(field_mutable:env_config_header_t.env_name)
  return _internal_mutable_env_name();
}
inline const std::string& env_config_header_t::_internal_env_name() const {
  return env_name_.GetNoArena();
}
inline void env_config_header_t::_internal_set_env_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_header_t::set_env_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_header_t.env_name)
}
inline void env_config_header_t::set_env_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_header_t.env_name)
}
inline void env_config_header_t::set_env_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_header_t.env_name)
}
inline std::string* env_config_header_t::_internal_mutable_env_name() {
  _has_bits_[0] |= 0x00000001u;
  return env_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_header_t::release_env_name() {
  // @@protoc_insertion_point(field_release:env_config_header_t.env_name)
  if (!has_env_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return env_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_header_t::set_allocated_env_name(std::string* env_name) {
  if (env_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  env_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_name);
  // @@protoc_insertion_point(field_set_allocated:env_config_header_t.env_name)
}

// required int32 env_ipv4_stream_port = 2 [default = 0];
inline bool env_config_header_t::_internal_has_env_ipv4_stream_port() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool env_config_header_t::has_env_ipv4_stream_port() const {
  return _internal_has_env_ipv4_stream_port();
}
inline void env_config_header_t::clear_env_ipv4_stream_port() {
  env_ipv4_stream_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_header_t::_internal_env_ipv4_stream_port() const {
  return env_ipv4_stream_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_header_t::env_ipv4_stream_port() const {
  // @@protoc_insertion_point(field_get:env_config_header_t.env_ipv4_stream_port)
  return _internal_env_ipv4_stream_port();
}
inline void env_config_header_t::_internal_set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  env_ipv4_stream_port_ = value;
}
inline void env_config_header_t::set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_ipv4_stream_port(value);
  // @@protoc_insertion_point(field_set:env_config_header_t.env_ipv4_stream_port)
}

// required int32 env_ipv6_stream_port = 3 [default = 0];
inline bool env_config_header_t::_internal_has_env_ipv6_stream_port() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool env_config_header_t::has_env_ipv6_stream_port() const {
  return _internal_has_env_ipv6_stream_port();
}
inline void env_config_header_t::clear_env_ipv6_stream_port() {
  env_ipv6_stream_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_header_t::_internal_env_ipv6_stream_port() const {
  return env_ipv6_stream_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_header_t::env_ipv6_stream_port() const {
  // @@protoc_insertion_point(field_get:env_config_header_t.env_ipv6_stream_port)
  return _internal_env_ipv6_stream_port();
}
inline void env_config_header_t::_internal_set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  env_ipv6_stream_port_ = value;
}
inline void env_config_header_t::set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_ipv6_stream_port(value);
  // @@protoc_insertion_point(field_set:env_config_header_t.env_ipv6_stream_port)
}

// required int32 env_pid = 4 [default = 0];
inline bool env_config_header_t::_internal_has_env_pid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool env_config_header_t::has_env_pid() const {
  return _internal_has_env_pid();
}
inline void env_config_header_t::clear_env_pid() {
  env_pid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_header_t::_internal_env_pid() const {
  return env_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_header_t::env_pid() const {
  // @@protoc_insertion_point(field_get:env_config_header_t.env_pid)
  return _internal_env_pid();
}
inline void env_config_header_t::_internal_set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  env_pid_ = value;
}
inline void env_config_header_t::set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_pid(value);
  // @@protoc_insertion_point(field_set:env_config_header_t.env_pid)
}

// required bytes env_host_name = 5 [default = ""];
inline bool env_config_header_t::_internal_has_env_host_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool env_config_header_t::has_env_host_name() const {
  return _internal_has_env_host_name();
}
inline void env_config_header_t::clear_env_host_name() {
  env_host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& env_config_header_t::env_host_name() const {
  // @@protoc_insertion_point(field_get:env_config_header_t.env_host_name)
  return _internal_env_host_name();
}
inline void env_config_header_t::set_env_host_name(const std::string& value) {
  _internal_set_env_host_name(value);
  // @@protoc_insertion_point(field_set:env_config_header_t.env_host_name)
}
inline std::string* env_config_header_t::mutable_env_host_name() {
  // @@protoc_insertion_point(field_mutable:env_config_header_t.env_host_name)
  return _internal_mutable_env_host_name();
}
inline const std::string& env_config_header_t::_internal_env_host_name() const {
  return env_host_name_.GetNoArena();
}
inline void env_config_header_t::_internal_set_env_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  env_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_header_t::set_env_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  env_host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_header_t.env_host_name)
}
inline void env_config_header_t::set_env_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  env_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_header_t.env_host_name)
}
inline void env_config_header_t::set_env_host_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  env_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_header_t.env_host_name)
}
inline std::string* env_config_header_t::_internal_mutable_env_host_name() {
  _has_bits_[0] |= 0x00000002u;
  return env_host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_header_t::release_env_host_name() {
  // @@protoc_insertion_point(field_release:env_config_header_t.env_host_name)
  if (!has_env_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return env_host_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_header_t::set_allocated_env_host_name(std::string* env_host_name) {
  if (env_host_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  env_host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_host_name);
  // @@protoc_insertion_point(field_set_allocated:env_config_header_t.env_host_name)
}

// required bytes env_invite = 6 [default = ""];
inline bool env_config_header_t::_internal_has_env_invite() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool env_config_header_t::has_env_invite() const {
  return _internal_has_env_invite();
}
inline void env_config_header_t::clear_env_invite() {
  env_invite_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& env_config_header_t::env_invite() const {
  // @@protoc_insertion_point(field_get:env_config_header_t.env_invite)
  return _internal_env_invite();
}
inline void env_config_header_t::set_env_invite(const std::string& value) {
  _internal_set_env_invite(value);
  // @@protoc_insertion_point(field_set:env_config_header_t.env_invite)
}
inline std::string* env_config_header_t::mutable_env_invite() {
  // @@protoc_insertion_point(field_mutable:env_config_header_t.env_invite)
  return _internal_mutable_env_invite();
}
inline const std::string& env_config_header_t::_internal_env_invite() const {
  return env_invite_.GetNoArena();
}
inline void env_config_header_t::_internal_set_env_invite(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  env_invite_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_header_t::set_env_invite(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  env_invite_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_header_t.env_invite)
}
inline void env_config_header_t::set_env_invite(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  env_invite_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_header_t.env_invite)
}
inline void env_config_header_t::set_env_invite(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  env_invite_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_header_t.env_invite)
}
inline std::string* env_config_header_t::_internal_mutable_env_invite() {
  _has_bits_[0] |= 0x00000004u;
  return env_invite_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_header_t::release_env_invite() {
  // @@protoc_insertion_point(field_release:env_config_header_t.env_invite)
  if (!has_env_invite()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return env_invite_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_header_t::set_allocated_env_invite(std::string* env_invite) {
  if (env_invite != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  env_invite_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_invite);
  // @@protoc_insertion_point(field_set_allocated:env_config_header_t.env_invite)
}

// -------------------------------------------------------------------

// env_config_t

// required bytes env_name = 1 [default = ""];
inline bool env_config_t::_internal_has_env_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool env_config_t::has_env_name() const {
  return _internal_has_env_name();
}
inline void env_config_t::clear_env_name() {
  env_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& env_config_t::env_name() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_name)
  return _internal_env_name();
}
inline void env_config_t::set_env_name(const std::string& value) {
  _internal_set_env_name(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_name)
}
inline std::string* env_config_t::mutable_env_name() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_name)
  return _internal_mutable_env_name();
}
inline const std::string& env_config_t::_internal_env_name() const {
  return env_name_.GetNoArena();
}
inline void env_config_t::_internal_set_env_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_name)
}
inline void env_config_t::set_env_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_name)
}
inline void env_config_t::set_env_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  env_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_name)
}
inline std::string* env_config_t::_internal_mutable_env_name() {
  _has_bits_[0] |= 0x00000001u;
  return env_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_name() {
  // @@protoc_insertion_point(field_release:env_config_t.env_name)
  if (!has_env_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return env_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_name(std::string* env_name) {
  if (env_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  env_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_name);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_name)
}

// required bytes env_headers_path = 2 [default = ""];
inline bool env_config_t::_internal_has_env_headers_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool env_config_t::has_env_headers_path() const {
  return _internal_has_env_headers_path();
}
inline void env_config_t::clear_env_headers_path() {
  env_headers_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& env_config_t::env_headers_path() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_headers_path)
  return _internal_env_headers_path();
}
inline void env_config_t::set_env_headers_path(const std::string& value) {
  _internal_set_env_headers_path(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_headers_path)
}
inline std::string* env_config_t::mutable_env_headers_path() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_headers_path)
  return _internal_mutable_env_headers_path();
}
inline const std::string& env_config_t::_internal_env_headers_path() const {
  return env_headers_path_.GetNoArena();
}
inline void env_config_t::_internal_set_env_headers_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  env_headers_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_headers_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  env_headers_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_headers_path)
}
inline void env_config_t::set_env_headers_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  env_headers_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_headers_path)
}
inline void env_config_t::set_env_headers_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  env_headers_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_headers_path)
}
inline std::string* env_config_t::_internal_mutable_env_headers_path() {
  _has_bits_[0] |= 0x00000002u;
  return env_headers_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_headers_path() {
  // @@protoc_insertion_point(field_release:env_config_t.env_headers_path)
  if (!has_env_headers_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return env_headers_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_headers_path(std::string* env_headers_path) {
  if (env_headers_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  env_headers_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_headers_path);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_headers_path)
}

// required bytes env_mountpoint = 3 [default = ""];
inline bool env_config_t::_internal_has_env_mountpoint() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool env_config_t::has_env_mountpoint() const {
  return _internal_has_env_mountpoint();
}
inline void env_config_t::clear_env_mountpoint() {
  env_mountpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& env_config_t::env_mountpoint() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_mountpoint)
  return _internal_env_mountpoint();
}
inline void env_config_t::set_env_mountpoint(const std::string& value) {
  _internal_set_env_mountpoint(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_mountpoint)
}
inline std::string* env_config_t::mutable_env_mountpoint() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_mountpoint)
  return _internal_mutable_env_mountpoint();
}
inline const std::string& env_config_t::_internal_env_mountpoint() const {
  return env_mountpoint_.GetNoArena();
}
inline void env_config_t::_internal_set_env_mountpoint(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  env_mountpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_mountpoint(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  env_mountpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_mountpoint)
}
inline void env_config_t::set_env_mountpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  env_mountpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_mountpoint)
}
inline void env_config_t::set_env_mountpoint(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  env_mountpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_mountpoint)
}
inline std::string* env_config_t::_internal_mutable_env_mountpoint() {
  _has_bits_[0] |= 0x00000004u;
  return env_mountpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_mountpoint() {
  // @@protoc_insertion_point(field_release:env_config_t.env_mountpoint)
  if (!has_env_mountpoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return env_mountpoint_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_mountpoint(std::string* env_mountpoint) {
  if (env_mountpoint != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  env_mountpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_mountpoint);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_mountpoint)
}

// required bytes env_components_path = 4 [default = ""];
inline bool env_config_t::_internal_has_env_components_path() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool env_config_t::has_env_components_path() const {
  return _internal_has_env_components_path();
}
inline void env_config_t::clear_env_components_path() {
  env_components_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& env_config_t::env_components_path() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_components_path)
  return _internal_env_components_path();
}
inline void env_config_t::set_env_components_path(const std::string& value) {
  _internal_set_env_components_path(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_components_path)
}
inline std::string* env_config_t::mutable_env_components_path() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_components_path)
  return _internal_mutable_env_components_path();
}
inline const std::string& env_config_t::_internal_env_components_path() const {
  return env_components_path_.GetNoArena();
}
inline void env_config_t::_internal_set_env_components_path(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  env_components_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_components_path(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  env_components_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_components_path)
}
inline void env_config_t::set_env_components_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  env_components_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_components_path)
}
inline void env_config_t::set_env_components_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  env_components_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_components_path)
}
inline std::string* env_config_t::_internal_mutable_env_components_path() {
  _has_bits_[0] |= 0x00000008u;
  return env_components_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_components_path() {
  // @@protoc_insertion_point(field_release:env_config_t.env_components_path)
  if (!has_env_components_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return env_components_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_components_path(std::string* env_components_path) {
  if (env_components_path != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  env_components_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_components_path);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_components_path)
}

// required bytes env_x509_certificate_path = 5 [default = ""];
inline bool env_config_t::_internal_has_env_x509_certificate_path() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool env_config_t::has_env_x509_certificate_path() const {
  return _internal_has_env_x509_certificate_path();
}
inline void env_config_t::clear_env_x509_certificate_path() {
  env_x509_certificate_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& env_config_t::env_x509_certificate_path() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_x509_certificate_path)
  return _internal_env_x509_certificate_path();
}
inline void env_config_t::set_env_x509_certificate_path(const std::string& value) {
  _internal_set_env_x509_certificate_path(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_x509_certificate_path)
}
inline std::string* env_config_t::mutable_env_x509_certificate_path() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_x509_certificate_path)
  return _internal_mutable_env_x509_certificate_path();
}
inline const std::string& env_config_t::_internal_env_x509_certificate_path() const {
  return env_x509_certificate_path_.GetNoArena();
}
inline void env_config_t::_internal_set_env_x509_certificate_path(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  env_x509_certificate_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_x509_certificate_path(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  env_x509_certificate_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_x509_certificate_path)
}
inline void env_config_t::set_env_x509_certificate_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  env_x509_certificate_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_x509_certificate_path)
}
inline void env_config_t::set_env_x509_certificate_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  env_x509_certificate_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_x509_certificate_path)
}
inline std::string* env_config_t::_internal_mutable_env_x509_certificate_path() {
  _has_bits_[0] |= 0x00000010u;
  return env_x509_certificate_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_x509_certificate_path() {
  // @@protoc_insertion_point(field_release:env_config_t.env_x509_certificate_path)
  if (!has_env_x509_certificate_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return env_x509_certificate_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_x509_certificate_path(std::string* env_x509_certificate_path) {
  if (env_x509_certificate_path != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  env_x509_certificate_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_x509_certificate_path);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_x509_certificate_path)
}

// required bytes env_network_ifname = 6 [default = ""];
inline bool env_config_t::_internal_has_env_network_ifname() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool env_config_t::has_env_network_ifname() const {
  return _internal_has_env_network_ifname();
}
inline void env_config_t::clear_env_network_ifname() {
  env_network_ifname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& env_config_t::env_network_ifname() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_network_ifname)
  return _internal_env_network_ifname();
}
inline void env_config_t::set_env_network_ifname(const std::string& value) {
  _internal_set_env_network_ifname(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_network_ifname)
}
inline std::string* env_config_t::mutable_env_network_ifname() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_network_ifname)
  return _internal_mutable_env_network_ifname();
}
inline const std::string& env_config_t::_internal_env_network_ifname() const {
  return env_network_ifname_.GetNoArena();
}
inline void env_config_t::_internal_set_env_network_ifname(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  env_network_ifname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_network_ifname(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  env_network_ifname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_network_ifname)
}
inline void env_config_t::set_env_network_ifname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  env_network_ifname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_network_ifname)
}
inline void env_config_t::set_env_network_ifname(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  env_network_ifname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_network_ifname)
}
inline std::string* env_config_t::_internal_mutable_env_network_ifname() {
  _has_bits_[0] |= 0x00000020u;
  return env_network_ifname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_network_ifname() {
  // @@protoc_insertion_point(field_release:env_config_t.env_network_ifname)
  if (!has_env_network_ifname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return env_network_ifname_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_network_ifname(std::string* env_network_ifname) {
  if (env_network_ifname != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  env_network_ifname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_network_ifname);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_network_ifname)
}

// required bytes env_ipv4_multicast_group_addr = 7 [default = ""];
inline bool env_config_t::_internal_has_env_ipv4_multicast_group_addr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv4_multicast_group_addr() const {
  return _internal_has_env_ipv4_multicast_group_addr();
}
inline void env_config_t::clear_env_ipv4_multicast_group_addr() {
  env_ipv4_multicast_group_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& env_config_t::env_ipv4_multicast_group_addr() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv4_multicast_group_addr)
  return _internal_env_ipv4_multicast_group_addr();
}
inline void env_config_t::set_env_ipv4_multicast_group_addr(const std::string& value) {
  _internal_set_env_ipv4_multicast_group_addr(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv4_multicast_group_addr)
}
inline std::string* env_config_t::mutable_env_ipv4_multicast_group_addr() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_ipv4_multicast_group_addr)
  return _internal_mutable_env_ipv4_multicast_group_addr();
}
inline const std::string& env_config_t::_internal_env_ipv4_multicast_group_addr() const {
  return env_ipv4_multicast_group_addr_.GetNoArena();
}
inline void env_config_t::_internal_set_env_ipv4_multicast_group_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  env_ipv4_multicast_group_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_ipv4_multicast_group_addr(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  env_ipv4_multicast_group_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_ipv4_multicast_group_addr)
}
inline void env_config_t::set_env_ipv4_multicast_group_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  env_ipv4_multicast_group_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_ipv4_multicast_group_addr)
}
inline void env_config_t::set_env_ipv4_multicast_group_addr(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  env_ipv4_multicast_group_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_ipv4_multicast_group_addr)
}
inline std::string* env_config_t::_internal_mutable_env_ipv4_multicast_group_addr() {
  _has_bits_[0] |= 0x00000040u;
  return env_ipv4_multicast_group_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_ipv4_multicast_group_addr() {
  // @@protoc_insertion_point(field_release:env_config_t.env_ipv4_multicast_group_addr)
  if (!has_env_ipv4_multicast_group_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return env_ipv4_multicast_group_addr_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_ipv4_multicast_group_addr(std::string* env_ipv4_multicast_group_addr) {
  if (env_ipv4_multicast_group_addr != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  env_ipv4_multicast_group_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_ipv4_multicast_group_addr);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_ipv4_multicast_group_addr)
}

// required int32 env_ipv4_broadcast_port = 8 [default = 0];
inline bool env_config_t::_internal_has_env_ipv4_broadcast_port() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv4_broadcast_port() const {
  return _internal_has_env_ipv4_broadcast_port();
}
inline void env_config_t::clear_env_ipv4_broadcast_port() {
  env_ipv4_broadcast_port_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::_internal_env_ipv4_broadcast_port() const {
  return env_ipv4_broadcast_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::env_ipv4_broadcast_port() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv4_broadcast_port)
  return _internal_env_ipv4_broadcast_port();
}
inline void env_config_t::_internal_set_env_ipv4_broadcast_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  env_ipv4_broadcast_port_ = value;
}
inline void env_config_t::set_env_ipv4_broadcast_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_ipv4_broadcast_port(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv4_broadcast_port)
}

// required int32 env_ipv4_multicast_port = 9 [default = 0];
inline bool env_config_t::_internal_has_env_ipv4_multicast_port() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv4_multicast_port() const {
  return _internal_has_env_ipv4_multicast_port();
}
inline void env_config_t::clear_env_ipv4_multicast_port() {
  env_ipv4_multicast_port_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::_internal_env_ipv4_multicast_port() const {
  return env_ipv4_multicast_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::env_ipv4_multicast_port() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv4_multicast_port)
  return _internal_env_ipv4_multicast_port();
}
inline void env_config_t::_internal_set_env_ipv4_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  env_ipv4_multicast_port_ = value;
}
inline void env_config_t::set_env_ipv4_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_ipv4_multicast_port(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv4_multicast_port)
}

// required int32 env_ipv4_stream_port = 10 [default = 0];
inline bool env_config_t::_internal_has_env_ipv4_stream_port() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv4_stream_port() const {
  return _internal_has_env_ipv4_stream_port();
}
inline void env_config_t::clear_env_ipv4_stream_port() {
  env_ipv4_stream_port_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::_internal_env_ipv4_stream_port() const {
  return env_ipv4_stream_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::env_ipv4_stream_port() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv4_stream_port)
  return _internal_env_ipv4_stream_port();
}
inline void env_config_t::_internal_set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  env_ipv4_stream_port_ = value;
}
inline void env_config_t::set_env_ipv4_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_ipv4_stream_port(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv4_stream_port)
}

// required bytes env_ipv6_multicast_group_addr = 11 [default = ""];
inline bool env_config_t::_internal_has_env_ipv6_multicast_group_addr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv6_multicast_group_addr() const {
  return _internal_has_env_ipv6_multicast_group_addr();
}
inline void env_config_t::clear_env_ipv6_multicast_group_addr() {
  env_ipv6_multicast_group_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& env_config_t::env_ipv6_multicast_group_addr() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv6_multicast_group_addr)
  return _internal_env_ipv6_multicast_group_addr();
}
inline void env_config_t::set_env_ipv6_multicast_group_addr(const std::string& value) {
  _internal_set_env_ipv6_multicast_group_addr(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv6_multicast_group_addr)
}
inline std::string* env_config_t::mutable_env_ipv6_multicast_group_addr() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_ipv6_multicast_group_addr)
  return _internal_mutable_env_ipv6_multicast_group_addr();
}
inline const std::string& env_config_t::_internal_env_ipv6_multicast_group_addr() const {
  return env_ipv6_multicast_group_addr_.GetNoArena();
}
inline void env_config_t::_internal_set_env_ipv6_multicast_group_addr(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  env_ipv6_multicast_group_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_ipv6_multicast_group_addr(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  env_ipv6_multicast_group_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_ipv6_multicast_group_addr)
}
inline void env_config_t::set_env_ipv6_multicast_group_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  env_ipv6_multicast_group_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_ipv6_multicast_group_addr)
}
inline void env_config_t::set_env_ipv6_multicast_group_addr(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000080u;
  env_ipv6_multicast_group_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_ipv6_multicast_group_addr)
}
inline std::string* env_config_t::_internal_mutable_env_ipv6_multicast_group_addr() {
  _has_bits_[0] |= 0x00000080u;
  return env_ipv6_multicast_group_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_ipv6_multicast_group_addr() {
  // @@protoc_insertion_point(field_release:env_config_t.env_ipv6_multicast_group_addr)
  if (!has_env_ipv6_multicast_group_addr()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return env_ipv6_multicast_group_addr_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_ipv6_multicast_group_addr(std::string* env_ipv6_multicast_group_addr) {
  if (env_ipv6_multicast_group_addr != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  env_ipv6_multicast_group_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_ipv6_multicast_group_addr);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_ipv6_multicast_group_addr)
}

// required int32 env_ipv6_multicast_port = 12 [default = 0];
inline bool env_config_t::_internal_has_env_ipv6_multicast_port() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv6_multicast_port() const {
  return _internal_has_env_ipv6_multicast_port();
}
inline void env_config_t::clear_env_ipv6_multicast_port() {
  env_ipv6_multicast_port_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::_internal_env_ipv6_multicast_port() const {
  return env_ipv6_multicast_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::env_ipv6_multicast_port() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv6_multicast_port)
  return _internal_env_ipv6_multicast_port();
}
inline void env_config_t::_internal_set_env_ipv6_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  env_ipv6_multicast_port_ = value;
}
inline void env_config_t::set_env_ipv6_multicast_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_ipv6_multicast_port(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv6_multicast_port)
}

// required int32 env_ipv6_stream_port = 13 [default = 0];
inline bool env_config_t::_internal_has_env_ipv6_stream_port() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv6_stream_port() const {
  return _internal_has_env_ipv6_stream_port();
}
inline void env_config_t::clear_env_ipv6_stream_port() {
  env_ipv6_stream_port_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::_internal_env_ipv6_stream_port() const {
  return env_ipv6_stream_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::env_ipv6_stream_port() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv6_stream_port)
  return _internal_env_ipv6_stream_port();
}
inline void env_config_t::_internal_set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  env_ipv6_stream_port_ = value;
}
inline void env_config_t::set_env_ipv6_stream_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_ipv6_stream_port(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv6_stream_port)
}

// required bool env_ipv4_enabled = 14 [default = true];
inline bool env_config_t::_internal_has_env_ipv4_enabled() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv4_enabled() const {
  return _internal_has_env_ipv4_enabled();
}
inline void env_config_t::clear_env_ipv4_enabled() {
  env_ipv4_enabled_ = true;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool env_config_t::_internal_env_ipv4_enabled() const {
  return env_ipv4_enabled_;
}
inline bool env_config_t::env_ipv4_enabled() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv4_enabled)
  return _internal_env_ipv4_enabled();
}
inline void env_config_t::_internal_set_env_ipv4_enabled(bool value) {
  _has_bits_[0] |= 0x00200000u;
  env_ipv4_enabled_ = value;
}
inline void env_config_t::set_env_ipv4_enabled(bool value) {
  _internal_set_env_ipv4_enabled(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv4_enabled)
}

// required bool env_ipv6_enabled = 15 [default = false];
inline bool env_config_t::_internal_has_env_ipv6_enabled() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool env_config_t::has_env_ipv6_enabled() const {
  return _internal_has_env_ipv6_enabled();
}
inline void env_config_t::clear_env_ipv6_enabled() {
  env_ipv6_enabled_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool env_config_t::_internal_env_ipv6_enabled() const {
  return env_ipv6_enabled_;
}
inline bool env_config_t::env_ipv6_enabled() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ipv6_enabled)
  return _internal_env_ipv6_enabled();
}
inline void env_config_t::_internal_set_env_ipv6_enabled(bool value) {
  _has_bits_[0] |= 0x00020000u;
  env_ipv6_enabled_ = value;
}
inline void env_config_t::set_env_ipv6_enabled(bool value) {
  _internal_set_env_ipv6_enabled(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ipv6_enabled)
}

// required int32 env_max_buffsize = 16 [default = 0];
inline bool env_config_t::_internal_has_env_max_buffsize() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool env_config_t::has_env_max_buffsize() const {
  return _internal_has_env_max_buffsize();
}
inline void env_config_t::clear_env_max_buffsize() {
  env_max_buffsize_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::_internal_env_max_buffsize() const {
  return env_max_buffsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::env_max_buffsize() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_max_buffsize)
  return _internal_env_max_buffsize();
}
inline void env_config_t::_internal_set_env_max_buffsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  env_max_buffsize_ = value;
}
inline void env_config_t::set_env_max_buffsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_max_buffsize(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_max_buffsize)
}

// required uint32 env_broadcast_interval_ms = 17 [default = 1000];
inline bool env_config_t::_internal_has_env_broadcast_interval_ms() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool env_config_t::has_env_broadcast_interval_ms() const {
  return _internal_has_env_broadcast_interval_ms();
}
inline void env_config_t::clear_env_broadcast_interval_ms() {
  env_broadcast_interval_ms_ = 1000u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 env_config_t::_internal_env_broadcast_interval_ms() const {
  return env_broadcast_interval_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 env_config_t::env_broadcast_interval_ms() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_broadcast_interval_ms)
  return _internal_env_broadcast_interval_ms();
}
inline void env_config_t::_internal_set_env_broadcast_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  env_broadcast_interval_ms_ = value;
}
inline void env_config_t::set_env_broadcast_interval_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_env_broadcast_interval_ms(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_broadcast_interval_ms)
}

// required int32 env_pid = 18 [default = -1];
inline bool env_config_t::_internal_has_env_pid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool env_config_t::has_env_pid() const {
  return _internal_has_env_pid();
}
inline void env_config_t::clear_env_pid() {
  env_pid_ = -1;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::_internal_env_pid() const {
  return env_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 env_config_t::env_pid() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_pid)
  return _internal_env_pid();
}
inline void env_config_t::_internal_set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  env_pid_ = value;
}
inline void env_config_t::set_env_pid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_env_pid(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_pid)
}

// required bytes env_host_name = 19 [default = ""];
inline bool env_config_t::_internal_has_env_host_name() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool env_config_t::has_env_host_name() const {
  return _internal_has_env_host_name();
}
inline void env_config_t::clear_env_host_name() {
  env_host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& env_config_t::env_host_name() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_host_name)
  return _internal_env_host_name();
}
inline void env_config_t::set_env_host_name(const std::string& value) {
  _internal_set_env_host_name(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_host_name)
}
inline std::string* env_config_t::mutable_env_host_name() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_host_name)
  return _internal_mutable_env_host_name();
}
inline const std::string& env_config_t::_internal_env_host_name() const {
  return env_host_name_.GetNoArena();
}
inline void env_config_t::_internal_set_env_host_name(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  env_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_host_name(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  env_host_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_host_name)
}
inline void env_config_t::set_env_host_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  env_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_host_name)
}
inline void env_config_t::set_env_host_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000100u;
  env_host_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_host_name)
}
inline std::string* env_config_t::_internal_mutable_env_host_name() {
  _has_bits_[0] |= 0x00000100u;
  return env_host_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_host_name() {
  // @@protoc_insertion_point(field_release:env_config_t.env_host_name)
  if (!has_env_host_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return env_host_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_host_name(std::string* env_host_name) {
  if (env_host_name != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  env_host_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_host_name);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_host_name)
}

// required bytes env_ca_cert_file = 20 [default = ""];
inline bool env_config_t::_internal_has_env_ca_cert_file() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool env_config_t::has_env_ca_cert_file() const {
  return _internal_has_env_ca_cert_file();
}
inline void env_config_t::clear_env_ca_cert_file() {
  env_ca_cert_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& env_config_t::env_ca_cert_file() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ca_cert_file)
  return _internal_env_ca_cert_file();
}
inline void env_config_t::set_env_ca_cert_file(const std::string& value) {
  _internal_set_env_ca_cert_file(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ca_cert_file)
}
inline std::string* env_config_t::mutable_env_ca_cert_file() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_ca_cert_file)
  return _internal_mutable_env_ca_cert_file();
}
inline const std::string& env_config_t::_internal_env_ca_cert_file() const {
  return env_ca_cert_file_.GetNoArena();
}
inline void env_config_t::_internal_set_env_ca_cert_file(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  env_ca_cert_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_ca_cert_file(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  env_ca_cert_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_ca_cert_file)
}
inline void env_config_t::set_env_ca_cert_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  env_ca_cert_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_ca_cert_file)
}
inline void env_config_t::set_env_ca_cert_file(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  env_ca_cert_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_ca_cert_file)
}
inline std::string* env_config_t::_internal_mutable_env_ca_cert_file() {
  _has_bits_[0] |= 0x00000200u;
  return env_ca_cert_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_ca_cert_file() {
  // @@protoc_insertion_point(field_release:env_config_t.env_ca_cert_file)
  if (!has_env_ca_cert_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return env_ca_cert_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_ca_cert_file(std::string* env_ca_cert_file) {
  if (env_ca_cert_file != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  env_ca_cert_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_ca_cert_file);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_ca_cert_file)
}

// required bytes env_ca_priv_key_file = 21 [default = ""];
inline bool env_config_t::_internal_has_env_ca_priv_key_file() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool env_config_t::has_env_ca_priv_key_file() const {
  return _internal_has_env_ca_priv_key_file();
}
inline void env_config_t::clear_env_ca_priv_key_file() {
  env_ca_priv_key_file_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& env_config_t::env_ca_priv_key_file() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_ca_priv_key_file)
  return _internal_env_ca_priv_key_file();
}
inline void env_config_t::set_env_ca_priv_key_file(const std::string& value) {
  _internal_set_env_ca_priv_key_file(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_ca_priv_key_file)
}
inline std::string* env_config_t::mutable_env_ca_priv_key_file() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_ca_priv_key_file)
  return _internal_mutable_env_ca_priv_key_file();
}
inline const std::string& env_config_t::_internal_env_ca_priv_key_file() const {
  return env_ca_priv_key_file_.GetNoArena();
}
inline void env_config_t::_internal_set_env_ca_priv_key_file(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  env_ca_priv_key_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_ca_priv_key_file(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  env_ca_priv_key_file_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_ca_priv_key_file)
}
inline void env_config_t::set_env_ca_priv_key_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  env_ca_priv_key_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_ca_priv_key_file)
}
inline void env_config_t::set_env_ca_priv_key_file(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000400u;
  env_ca_priv_key_file_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_ca_priv_key_file)
}
inline std::string* env_config_t::_internal_mutable_env_ca_priv_key_file() {
  _has_bits_[0] |= 0x00000400u;
  return env_ca_priv_key_file_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_ca_priv_key_file() {
  // @@protoc_insertion_point(field_release:env_config_t.env_ca_priv_key_file)
  if (!has_env_ca_priv_key_file()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return env_ca_priv_key_file_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_ca_priv_key_file(std::string* env_ca_priv_key_file) {
  if (env_ca_priv_key_file != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  env_ca_priv_key_file_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_ca_priv_key_file);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_ca_priv_key_file)
}

// required bytes env_cert_info = 22 [default = ""];
inline bool env_config_t::_internal_has_env_cert_info() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool env_config_t::has_env_cert_info() const {
  return _internal_has_env_cert_info();
}
inline void env_config_t::clear_env_cert_info() {
  env_cert_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& env_config_t::env_cert_info() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_cert_info)
  return _internal_env_cert_info();
}
inline void env_config_t::set_env_cert_info(const std::string& value) {
  _internal_set_env_cert_info(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_cert_info)
}
inline std::string* env_config_t::mutable_env_cert_info() {
  // @@protoc_insertion_point(field_mutable:env_config_t.env_cert_info)
  return _internal_mutable_env_cert_info();
}
inline const std::string& env_config_t::_internal_env_cert_info() const {
  return env_cert_info_.GetNoArena();
}
inline void env_config_t::_internal_set_env_cert_info(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  env_cert_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void env_config_t::set_env_cert_info(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  env_cert_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:env_config_t.env_cert_info)
}
inline void env_config_t::set_env_cert_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  env_cert_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:env_config_t.env_cert_info)
}
inline void env_config_t::set_env_cert_info(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000800u;
  env_cert_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:env_config_t.env_cert_info)
}
inline std::string* env_config_t::_internal_mutable_env_cert_info() {
  _has_bits_[0] |= 0x00000800u;
  return env_cert_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* env_config_t::release_env_cert_info() {
  // @@protoc_insertion_point(field_release:env_config_t.env_cert_info)
  if (!has_env_cert_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return env_cert_info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void env_config_t::set_allocated_env_cert_info(std::string* env_cert_info) {
  if (env_cert_info != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  env_cert_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env_cert_info);
  // @@protoc_insertion_point(field_set_allocated:env_config_t.env_cert_info)
}

// required uint64 env_cert_exp_time = 23 [default = 0];
inline bool env_config_t::_internal_has_env_cert_exp_time() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool env_config_t::has_env_cert_exp_time() const {
  return _internal_has_env_cert_exp_time();
}
inline void env_config_t::clear_env_cert_exp_time() {
  env_cert_exp_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 env_config_t::_internal_env_cert_exp_time() const {
  return env_cert_exp_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 env_config_t::env_cert_exp_time() const {
  // @@protoc_insertion_point(field_get:env_config_t.env_cert_exp_time)
  return _internal_env_cert_exp_time();
}
inline void env_config_t::_internal_set_env_cert_exp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  env_cert_exp_time_ = value;
}
inline void env_config_t::set_env_cert_exp_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_env_cert_exp_time(value);
  // @@protoc_insertion_point(field_set:env_config_t.env_cert_exp_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_env_5finfo_2eproto
